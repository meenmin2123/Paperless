<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ss.paperless.report.ReportMapper">
    <resultMap id="ReportResultMap" type="com.ss.paperless.report.ReportDTO">

        <!-- Report 기본 필드 매핑 -->
        <id property="repo_no" column="repo_no"/>
        <result property="repo_emp_no" column="repo_emp_no"/>
        <result property="emp_code" column="emp_code"/>
        <result property="repo_title" column="repo_title"/>
        <result property="repo_content" column="repo_content"/>
        <result property="repo_status" column="repo_status"/>
        <result property="repo_code" column="repo_code"/>
        <result property="draft_date" column="draft_date"/>
        <result property="submission_date" column="submission_date"/>
        <result property="cancel_date" column="cancel_date"/>
        <result property="cancel_content" column="cancel_content"/>
        <result property="repo_type" column="repo_type"/>
        <result property="writer" column="writer"/>
        <result property="approvalType" column="approval_type"/>
        <result property="appr_order" column="appr_order"/>

        <!-- Work 관련 필드 매핑 -->
        <result property="work_repo_no" column="work_repo_no"/>
        <result property="repo_start_time" column="repo_start_time"/>
        <result property="repo_end_time" column="repo_end_time"/>

        <!-- Purchase 관련 필드 매핑 -->
        <result property="purch_repo_no" column="purch_repo_no"/>
        <result property="product_no" column="product_no"/>
        <result property="category" column="category"/>
        <result property="product_name" column="product_name"/>
        <result property="product_size" column="product_size"/>
        <result property="product_count" column="product_count"/>
        <result property="product_price" column="product_price"/>
        <result property="productPrices" column="product_prices"/>
        <result property="productEtc" column="product_etc"/>

        <!-- Attendance 관련 필드 매핑 -->
        <result property="atten_repo_no" column="atten_repo_no"/>
        <result property="vacation_type" column="vacation_type"/>
        <result property="atten_start_date" column="atten_start_date"/>
        <result property="atten_end_date" column="atten_end_date"/>

        <!-- Attachment 관련 필드 매핑 -->
        <result property="atta_no" column="atta_no"/>
        <result property="atta_key" column="atta_key"/>
        <result property="atta_url" column="atta_url"/>
        <result property="atta_original_name" column="atta_original_name"/>
        <result property="atta_size" column="atta_size"/>

        <!-- 결재자 목록 (ApproverDTO) 매핑 -->
        <collection property="approver" ofType="com.ss.paperless.report.ApproverDTO">
            <id property="appr_no" column="appr_no"/>
            <result property="emp_no" column="emp_no"/>
            <result property="appr_repo_no" column="appr_repo_no"/>
            <result property="appr_emp_no" column="appr_emp_no"/>
            <result property="appr_order" column="appr_order"/>
            <result property="appr_status" column="appr_status"/>
            <result property="approval_type" column="approval_type"/>
            <result property="appr_delegate" column="appr_delegate"/>
        </collection>

        <!-- 참조자 목록 (ReferenceDTO) 매핑 -->
        <collection property="reference" ofType="com.ss.paperless.report.ReferenceDTO">
            <id property="refe_no" column="refe_no"/>
            <result property="refe_repo_no" column="refe_repo_no"/>
            <result property="refe_emp_no" column="refe_emp_no"/>
            <result property="refe_dept_no" column="refe_dept_no"/>
        </collection>

        <!-- 수신자 목록 (RecipientDTO) 매핑 -->
        <collection property="recipient" ofType="com.ss.paperless.report.RecipientDTO">
            <id property="reci_no" column="reci_no"/>
            <result property="reci_repo_no" column="reci_repo_no"/>
            <result property="reci_emp_no" column="reci_emp_no"/>
            <result property="reci_dept_no" column="reci_dept_no"/>
        </collection>
    </resultMap>

    <!-- Report 테이블에 저장 데이터를 삽입하는 SQL (문서번호 추가) -->
    <insert id="AddReportData" parameterType="map" useGeneratedKeys="true" keyProperty="repo_no">
        INSERT INTO `Report` (repo_code, repo_emp_no, repo_title, repo_content, repo_status, repo_type, repo_date)
        VALUES (#{documentCode}, #{repoEmpNo}, #{reportTitle}, #{reportContent}, #{status}, 'work', #{reportDate})
    </insert>

    <!-- WorkReport 테이블에 임시 저장 데이터를 삽입하는 SQL -->
    <insert id="AddWorkReportData" parameterType="map">
        INSERT INTO `WorkReport` (work_repo_no, repo_start_time, repo_end_time)
        VALUES (#{repo_no}, #{repoStartTime}, #{repoEndTime})
    </insert>

    <!-- Approver 테이블 -->
    <insert id="insertApprover" parameterType="map">
        INSERT INTO Approver (appr_repo_no, appr_emp_no, appr_order, appr_status, appr_delegate, appr_is_read)
        VALUES (#{appr_repo_no}, #{appr_emp_no}, #{appr_order}, #{appr_status}, 0, 0)
    </insert>

    <!-- Reference 테이블 -->
    <insert id="insertReference" parameterType="map">
        INSERT INTO Reference (refe_repo_no, refe_emp_no, refe_dept_no, refe_is_read)
        VALUES (#{refe_repo_no}, #{refe_emp_no}, #{refe_dept_no}, 0)
    </insert>

    <!-- Recipient 테이블 -->
    <insert id="insertRecipient" parameterType="map">
        INSERT INTO Recipient (reci_repo_no, reci_emp_no, reci_dept_no, reci_is_read)
        VALUES (#{reci_repo_no}, #{reci_emp_no}, #{reci_dept_no}, 0)
    </insert>

    <!-- 파일 저장 -->
    <insert id="insertAttachment" parameterType="com.ss.paperless.attachment.Attachment">
        INSERT INTO Attachment (atta_key, atta_url, atta_original_name, atta_size)
        VALUES (#{attaKey}, #{attaUrl}, #{attaOriginalName}, #{attaSize})
    </insert>

    <!-- ReportAttachment - 파일 저장 -->
    <insert id="insertReportAttachment">
        INSERT INTO ReportAttachment (repo_no, atta_no) VALUES (#{repoNo}, #{attaNo})
    </insert>

    <select id="getApproversByReportId" resultType="map" parameterType="long">
        SELECT * FROM Approver WHERE appr_repo_no = #{reportId} ORDER BY appr_order
    </select>

    <update id="updateApproverStatus" parameterType="map">
        UPDATE Approver SET appr_status = #{appr_status} WHERE appr_repo_no = #{repo_no} AND appr_emp_no = #{appr_emp_no}
    </update>

    <!-- Approver 테이블에 결재자 데이터를 삽입하는 SQL -->
    <insert id="AddApproversData" parameterType="map">
        INSERT INTO `Approver` (appr_repo_no, appr_emp_no, appr_dept_no, appr_order, appr_status, appr_delegate)
        VALUES
        <foreach item="approver" collection="approvers" separator=",">
            (#{repo_no}, #{approver.appr_emp_no}, #{approver.appr_dept_no}, #{approver.appr_order}, #{approver.appr_status}, #{approver.appr_delegate})
        </foreach>
    </insert>

    <!-- Reference 테이블에 참조자 데이터를 삽입하는 SQL -->
    <insert id="AddReferencesData" parameterType="map">
        INSERT INTO `Reference` (refe_repo_no, refe_emp_no, refe_dept_no)
        VALUES
        <foreach item="reference" collection="references" separator=",">
            (
            #{repo_no},
            <choose>
                <when test="reference.refe_emp_no != null">
                    #{reference.refe_emp_no, jdbcType=BIGINT}
                </when>
                <otherwise>NULL</otherwise>
            </choose>,
            <choose>
                <when test="reference.refe_dept_no != null">
                    #{reference.refe_dept_no, jdbcType=BIGINT}
                </when>
                <otherwise>NULL</otherwise>
            </choose>
            )
        </foreach>
    </insert>

    <!-- Recipient 테이블에 수신자 데이터를 삽입하는 SQL -->
    <insert id="AddReceiversData" parameterType="map">
        INSERT INTO `Recipient` (reci_repo_no, reci_emp_no, reci_dept_no)
        VALUES
        <foreach item="recipient" collection="receivers" separator=",">
            (
            #{repo_no},
            <choose>
                <when test="recipient.rece_emp_no != null">
                    #{recipient.rece_emp_no, jdbcType=BIGINT}
                </when>
                <otherwise>NULL</otherwise>
            </choose>,
            <choose>
                <when test="recipient.rece_dept_no != null">
                    #{recipient.rece_dept_no, jdbcType=BIGINT}
                </when>
                <otherwise>NULL</otherwise>
            </choose>
            )
        </foreach>
    </insert>

    <!-- Attachment 테이블에 첨부파일 데이터를 삽입하는 SQL -->
    <insert id="AddAttachmentData" parameterType="map" useGeneratedKeys="true" keyProperty="atta_no">
        INSERT INTO `Attachment` (atta_key, atta_url, atta_original_name, atta_size)
        VALUES (#{atta_key}, #{atta_url}, #{atta_original_name}, #{atta_size})
    </insert>

    <!-- ReportAttachment 테이블에 보고서와 첨부파일 관계를 삽입하는 SQL -->
    <insert id="AddReportAttachmentData" parameterType="map">
        INSERT INTO `ReportAttachment` (repo_no, atta_no)
        VALUES (#{repo_no}, #{atta_no})
    </insert>

    <!-- 결재 상신 시 결재자 상태를 업데이트하는 SQL -->
    <update id="UpdateApproverStatusForSubmission" parameterType="long">
        UPDATE `Approver`
        SET appr_status = 'pending'
        WHERE appr_repo_no = #{repo_no}
    </update>

    <!-- 상신 취소 시 결재자 상태 초기화하는 SQL -->
    <update id="ResetApproverStatus" parameterType="long">
        UPDATE `Approver`
        SET appr_status = 'pending'
        WHERE appr_repo_no = #{repo_no}
    </update>

    <!-- 회수 시 결재자 상태를 중단하는 SQL -->
    <update id="HaltApproverStatus" parameterType="long">
        UPDATE `Approver`
        SET appr_status = 'halted'
        WHERE appr_repo_no = #{repo_no}
    </update>

    <insert id="AddSaveAsDraftReportData">

    </insert>

    <!-- repo_type 조회 쿼리 -->
    <select id="getReportTypeById" parameterType="long" resultType="string">
        SELECT repo_type FROM Report WHERE repo_no = #{reportId}
    </select>

    <!-- 보고서 전체 목록(부서별) -->
    <select id="selectWorkReports" parameterType="java.lang.Long" resultType="ReportDTO">
        SELECT *
        FROM Report r
                 JOIN WorkReport w ON r.repo_no = w.work_repo_no
                 JOIN Employee e ON r.repo_emp_no = e.emp_no
        WHERE e.emp_dept_no = #{deptNo}
    </select>

    <select id="selectAttenReports" parameterType="java.lang.Long" resultType="ReportDTO">
        SELECT *
        FROM Report r
                 JOIN AttendanceReport a ON r.repo_no = a.atten_repo_no
                 JOIN Employee e ON r.repo_emp_no = e.emp_no
        WHERE e.emp_dept_no = #{deptNo}
    </select>

    <select id="selectPurcReports" parameterType="java.lang.Long" resultType="ReportDTO">
        SELECT *
        FROM Report r
                 JOIN PurchaseReport p ON r.repo_no = p.purch_repo_no
                 JOIN Employee e ON r.repo_emp_no = e.emp_no
        WHERE e.emp_dept_no = #{deptNo}
    </select>

    <!-- 보고서 상세 페이지 데이터 조회 쿼리 -->
    <select id="selectReportById" resultMap="ReportResultMap" parameterType="Long">
        SELECT * FROM report r
                          left join workreport wr on r.repo_no = wr.work_repo_no
                          left join approver a on a.appr_repo_no = r.repo_no
                          left join recipient re on re.reci_repo_no = r.repo_no
                          left join reference rf on rf.refe_repo_no = r.repo_no
                          left join employee e on e.emp_no = r.repo_emp_no
                 WHERE repo_status = 'submitted' AND repo_no = #{reportId}
    </select>
	
</mapper>
